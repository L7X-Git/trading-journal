"""add strategies accounts and trade enhancements

Revision ID: 834a11841967
Revises: 3f4d025d0922
Create Date: 2025-10-25 10:57:59.143899

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '834a11841967'
down_revision = '3f4d025d0922'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    account_type_enum = sa.Enum('Live', 'Funded', 'Evaluation', 'Challenge', 'Demo', name='account_type_enum')
    preferred_direction_enum = sa.Enum('Long', 'Short', 'Both', name='preferred_direction_enum')
    trade_direction_enum = sa.Enum('Long', 'Short', name='trade_direction_enum')
    trade_session_enum = sa.Enum('NY', 'London', 'Asia', name='trade_session_enum')

    bind = op.get_bind()
    trade_direction_enum.create(bind, checkfirst=True)
    trade_session_enum.create(bind, checkfirst=True)

    op.create_table('accounts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('type', account_type_enum, nullable=False),
    sa.Column('broker_platform', sa.String(length=120), nullable=True),
    sa.Column('initial_balance', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('current_balance', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('commission_split_percent', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('max_daily_drawdown', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('max_overall_drawdown', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('profit_target', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('allowed_instruments', sa.Text(), nullable=True),
    sa.Column('violation_triggers', sa.Text(), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('expiration_date', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('strategies',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('category', sa.String(length=32), nullable=True),
    sa.Column('timeframes', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('preferred_direction', preferred_direction_enum, nullable=False),
    sa.Column('entry_criteria', sa.Text(), nullable=True),
    sa.Column('exit_criteria', sa.Text(), nullable=True),
    sa.Column('invalid_conditions', sa.Text(), nullable=True),
    sa.Column('state_of_mind', sa.Text(), nullable=True),
    sa.Column('common_bias', sa.Text(), nullable=True),
    sa.Column('example_image_url', sa.String(length=512), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.add_column('tags', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('tags', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.drop_constraint('trade_tags_trade_id_fkey', 'trade_tags', type_='foreignkey')
    op.drop_constraint('trade_tags_tag_id_fkey', 'trade_tags', type_='foreignkey')
    op.create_foreign_key(None, 'trade_tags', 'trades', ['trade_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'trade_tags', 'tags', ['tag_id'], ['id'], ondelete='CASCADE')
    op.add_column('trades', sa.Column('direction', trade_direction_enum, server_default='Long', nullable=False))
    op.add_column('trades', sa.Column('session', trade_session_enum, nullable=True))
    op.add_column('trades', sa.Column('strategy_id', sa.UUID(), nullable=False))
    op.add_column('trades', sa.Column('stop_loss_planned', sa.Numeric(precision=18, scale=6), nullable=True))
    op.add_column('trades', sa.Column('take_profit_planned', sa.Numeric(precision=18, scale=6), nullable=True))
    op.add_column('trades', sa.Column('risk_per_trade', sa.Numeric(precision=18, scale=6), nullable=True))
    op.add_column('trades', sa.Column('rr_planned', sa.Numeric(precision=18, scale=6), nullable=True))
    op.add_column('trades', sa.Column('pnl', sa.Numeric(precision=18, scale=6), server_default='0', nullable=False))
    op.add_column('trades', sa.Column('r_multiple', sa.Numeric(precision=18, scale=6), nullable=True))
    op.add_column('trades', sa.Column('confirmations', postgresql.ARRAY(sa.String()), server_default=sa.text('ARRAY[]::varchar[]'), nullable=False))
    op.add_column('trades', sa.Column('confirmations_count', sa.Integer(), server_default='0', nullable=False))
    op.add_column('trades', sa.Column('notes', sa.Text(), nullable=True))
    op.add_column('trades', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('trades', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('trades', 'account_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('trades', 'entry_timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('trades', 'exit_timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('trades', 'entry_price',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Numeric(precision=18, scale=6),
               existing_nullable=False)
    op.alter_column('trades', 'exit_price',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Numeric(precision=18, scale=6),
               existing_nullable=False)
    op.alter_column('trades', 'commissions',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Numeric(precision=15, scale=2),
               existing_nullable=True)
    op.alter_column('trades', 'import_method',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=16),
               existing_nullable=True)
    op.create_foreign_key(None, 'trades', 'strategies', ['strategy_id'], ['id'], ondelete='RESTRICT')
    op.create_foreign_key(None, 'trades', 'accounts', ['account_id'], ['id'], ondelete='RESTRICT')
    op.execute("UPDATE trades SET pnl = COALESCE(net_pnl, 0), confirmations = ARRAY[]::varchar[], confirmations_count = 0")
    op.alter_column('trades', 'direction', server_default=None, existing_type=sa.Enum('Long', 'Short', name='trade_direction_enum'))
    op.alter_column('trades', 'pnl', server_default=None, existing_type=sa.Numeric(precision=18, scale=6))
    op.alter_column('trades', 'confirmations', server_default=None, existing_type=postgresql.ARRAY(sa.String()))
    op.alter_column('trades', 'confirmations_count', server_default=None, existing_type=sa.Integer())
    op.alter_column('trades', 'notes', server_default=None, existing_type=sa.Text())
    op.drop_column('trades', 'net_pnl')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('trades', sa.Column('net_pnl', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'trades', type_='foreignkey')
    op.drop_constraint(None, 'trades', type_='foreignkey')
    op.alter_column('trades', 'import_method',
               existing_type=sa.String(length=16),
               type_=sa.VARCHAR(length=10),
               existing_nullable=True)
    op.alter_column('trades', 'commissions',
               existing_type=sa.Numeric(precision=15, scale=2),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
    op.alter_column('trades', 'exit_price',
               existing_type=sa.Numeric(precision=18, scale=6),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=False)
    op.alter_column('trades', 'entry_price',
               existing_type=sa.Numeric(precision=18, scale=6),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=False)
    op.alter_column('trades', 'exit_timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('trades', 'entry_timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('trades', 'account_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('trades', 'updated_at')
    op.drop_column('trades', 'created_at')
    op.drop_column('trades', 'confirmations_count')
    op.drop_column('trades', 'confirmations')
    op.drop_column('trades', 'r_multiple')
    op.drop_column('trades', 'pnl')
    op.drop_column('trades', 'rr_planned')
    op.drop_column('trades', 'risk_per_trade')
    op.drop_column('trades', 'notes')
    op.drop_column('trades', 'take_profit_planned')
    op.drop_column('trades', 'stop_loss_planned')
    op.drop_column('trades', 'strategy_id')
    op.drop_column('trades', 'session')
    op.drop_column('trades', 'direction')
    op.drop_constraint(None, 'trade_tags', type_='foreignkey')
    op.drop_constraint(None, 'trade_tags', type_='foreignkey')
    op.create_foreign_key('trade_tags_tag_id_fkey', 'trade_tags', 'tags', ['tag_id'], ['id'])
    op.create_foreign_key('trade_tags_trade_id_fkey', 'trade_tags', 'trades', ['trade_id'], ['id'])
    op.drop_column('tags', 'updated_at')
    op.drop_column('tags', 'created_at')
    op.drop_table('strategies')
    op.drop_table('accounts')
    trade_session_enum = sa.Enum('NY', 'London', 'Asia', name='trade_session_enum')
    trade_direction_enum = sa.Enum('Long', 'Short', name='trade_direction_enum')
    preferred_direction_enum = sa.Enum('Long', 'Short', 'Both', name='preferred_direction_enum')
    account_type_enum = sa.Enum('Live', 'Funded', 'Evaluation', 'Challenge', 'Demo', name='account_type_enum')
    bind = op.get_bind()
    trade_session_enum.drop(bind, checkfirst=True)
    trade_direction_enum.drop(bind, checkfirst=True)
    preferred_direction_enum.drop(bind, checkfirst=True)
    account_type_enum.drop(bind, checkfirst=True)
    # ### end Alembic commands ###
